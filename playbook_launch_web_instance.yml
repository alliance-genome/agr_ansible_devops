---
- name: Setup Docker Server
  hosts: local
  connection: local
  gather_facts: False

  vars_files:
    - "environments/{{ env }}/main.yml" # ENV must always be loaded first
    - "environments/shared_secrets.yml"
    - "environments/shared_aws_instance_variables.yml"

  tasks:
    - name: Launch instances
      ec2_instance:
        key_name: AGR-ssl2
        security_groups: ["default", "SSH", "HTTP/HTTPS"]
        instance_type: "{{ WEBSERVER_INSTANCE_TYPE }}"
        image_id: "{{ WEBSERVER_AMI_IMAGE }}"
        region: us-east-1
        vpc_subnet_id: subnet-3ebf4477
        iam_instance_profile: S3DataAccess
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        network:
          assign_public_ip: yes
        volumes:
          - device_name: /dev/xvda
            ebs:
              volume_type: gp3
              volume_size: 750
              delete_on_termination: yes
        wait: yes
        user_data: "" # Otherwise get weird error on start up
        tags:
          Name: "Ansible Generated - {{ PLAYBOOK_NAME }}"
      register: ec2

    - name: Add all instance private IPs to host group
      add_host:
        hostname: '{{ item.private_ip_address }}'
        groupname: launched
      with_items: "{{ ec2.instances }}"
      register: launched

    - name: Retrieve all volumes for a queried instance
      ec2_vol_info:
        region: us-east-1
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        filters:
          attachment.instance-id: '{{ item }}'
      with_items: "{{ ec2.instance_ids }}"
      register: ec2_volumes

    - name: Ensure all volumes are tagged
      ec2_tag:
        region: us-east-1
        resource: '{{ item.1.id }}'
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        tags:
          Name: "Ansible Generated Volume - {{ PLAYBOOK_NAME }}"
      with_subelements:
        - "{{ ec2_volumes.results }}"
        - volumes

    - name: Waiting for SSH to be up
      wait_for:
        host: "{{ item.private_ip_address }}"
        port: 22
        delay: 5
        timeout: 300
        state: started
      with_items: "{{ ec2.instances }}"
