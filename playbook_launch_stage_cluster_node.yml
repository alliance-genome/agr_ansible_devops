---

- name: Setup SSH Keys
  hosts: local
  connection: local
  gather_facts: False

  pre_tasks:
    - name: Import Secret Variable file
      include_vars: "environments/shared_secrets.yml"
  
    - name: Copy SSH private key file
      copy:
        content: "{{ AGRSSL2_content }}"
        dest: "/root/.ssh/id_rsa"
        mode: 0600

- name: Setup Docker Server
  hosts: local
  connection: local
  gather_facts: False

  vars_files:
    - "environments/{{ env }}/main.yml" # ENV must always be loaded first
    - "environments/shared_secrets.yml"
    - "environments/shared_aws_instance_variables.yml"

  #Note: Define the on_demand variable as true to request on-demand instances
  #Default launch behaviour: spot instances

  tasks:
    - name: Launch instance
      ec2_instance:
        key_name: AGR-ssl2
        security_groups: ["default", "HTTP/HTTPS"]
        instance_type: "{{ COMPUTE_INSTANCE_TYPE }}"
        image_id: "{{ COMPUTE_AMI_IMAGE }}"
        region: us-east-1
        vpc_subnet_id: subnet-df7c7487
        iam_instance_profile: S3DataAccess
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        network:
          assign_public_ip: true
          private_ip_address: "{{ STAGE_ES_CLUSTER_NODE_IP }}"
        volumes:
          - device_name: /dev/xvda
            ebs:
              volume_type: gp3
              volume_size: 100
              iops: 3000
              delete_on_termination: yes
        wait: yes
        user_data: "" # Otherwise get weird error on start up
        tags:
          Name: "Ansible Generated - {{ PLAYBOOK_NAME }}"
        instance_initiated_shutdown_behavior: terminate
      register: ec2

    - name: Add all instance private IPs to host group
      add_host:
        hostname: '{{ item.private_ip_address }}'
        groupname: launched
      with_items: "{{ ec2.instances }}"
      register: launched

    - name: Retrieve all volumes for a queried instance
      ec2_vol_info:
        region: us-east-1
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        filters:
          attachment.instance-id: '{{ item }}'
      with_items: "{{ ec2.instance_ids }}"
      register: ec2_volumes

    - name: Ensure all volumes are tagged
      ec2_tag:
        region: us-east-1
        resource: '{{ item.1.id }}'
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        tags:
          Name: "Ansible Generated Volume - {{ PLAYBOOK_NAME }}"
      with_subelements:
        - "{{ ec2_volumes.results }}"
        - volumes

    - name: Waiting for SSH to be up
      wait_for:
        host: "{{ item.private_ip_address }}"
        port: 22
        delay: 5
        timeout: 300
        state: started
      with_items: "{{ ec2.instances }}"

- name: Launch Post Tasks
  hosts: launched
  user: core
  gather_facts: False

  vars_files:
    - "environments/{{ env }}/main.yml" # ENV must always be loaded first
    - "environments/shared_secrets.yml"
    - "environments/shared_variables.yml"
    - "environments/shared_aws_instance_variables.yml"

  roles:
    - role: install_python
      become: true
      become_user: root
    - role: setup_nvme_drives
      when: not SKIP_NVME_DRIVES and not SETUP_NVME_DRIVE
      become: true
      become_user: root
    - role: setup_nvme_drive
      when: SETUP_NVME_DRIVE and SKIP_NVME_DRIVES
      become: true
      become_user: root
    - role: setup_docker # setup_nvme_drive(s) restarts docker so this needs to come after
      become: true
      become_user: root
    - role: setup_swap
      become: true
      become_user: root


- name: Setup Docker Server
  hosts: launched
  user: core
  gather_facts: False

  vars_files:
    - "environments/{{ env }}/main.yml" # ENV must always be loaded first
    - "environments/shared_secrets.yml"
    - "environments/shared_variables.yml"
    - "environments/shared_aws_instance_variables.yml"

  #Note: Define the on_demand variable as true to request on-demand instances
  #Default launch behaviour: spot instances

  tasks:

    - name: Pull ES Env Image
      docker_image:
        name: "{{ ES_ENV_IMAGE }}"
        source: pull
  
    - name: Run ES Cluster Node "{{ STAGE_ES_CLUSTER_NODE_NAME }}"
      docker_container:
        name: "{{ ES_SERVER_NAME }}{{ STAGE_ES_CLUSTER_NODE_NAME }}"
        image: "{{ ES_ENV_IMAGE }}"
        log_driver: "gelf"
        log_options:
          gelf-address: "{{ LOG_SERVER_ADDRESS }}"
        network_mode: "{{ NET }}"
        ports:
          - "9200:9200"
          - "9300:9300"
        volumes:
          - "es_{{ STAGE_ES_CLUSTER_NODE_NAME }}_data_volume:/usr/share/elasticsearch/data"
        env:
          node.name: "{{ ES_SERVER_NAME }}{{ STAGE_ES_CLUSTER_NODE_NAME }}"
          cluster.name: es-cluster
          ES_JAVA_OPTS: "-Xms7g -Xmx7g"
          xpack.security.enabled: "false"
          ingest.geoip.downloader.enabled: "false"
          discovery.seed_hosts: "{{ stage_node_transport_list }}"
          cluster.initial_master_nodes: "{{ STAGE_ES_CLUSTER_SERVER_FULLLIST }}"
          transport.host: "0.0.0.0"
          transport.publish_host: "{{ STAGE_ES_CLUSTER_NODE_IP }}"
          transport.publish_port: "9300"
